/*! \mainpage Developer's Documentation

@section intro_sec Introduction

This documentation is for the developer of [vrpRouting](c$https://github.com/pgRouting/vrprouting).

A developer might want to:

  - Fix a bug
  - Add new functionality
  - Modify the documentation
  - Add tests
    - regression
    - benchmark

@section install_sec Installation for developing


Step by Step processing

1. Create a fork of the original [vrpRouting](https://github.com/pgRouting/vrprouting) repository.
   - If you don't have an account in Github, please [create one](https://github.com/)
     - for purposes of this document the account name is: `acountName`
   - Navigate to [pgRouting](https://github.com/pgRouting/pgrouting) repository.
   - In the top-right corner of the page, click Fork.
   - Additional information can be found in [fork-a-repo](https://help.github.com/articles/fork-a-repo)

2. Create a local clone of your above created fork
   - [set up Git](https://help.github.com/articles/set-up-git) in your computer.
   - clone your fork
~~~~{.c}
     git clone https://github.com/acountName/vrprouting
~~~~

3. Go to your clone
~~~~{.c}
     cd vrprouting
~~~~

4. Set the remote connections
   - [More on remotes](https://help.github.com/categories/managing-remotes/) .
   - check the remote connection
~~~~{.c}
    git remote -v
~~~~
   -  Add upstream remote https://github.com/pgRouting/vrprouting
~~~~{.c}
    git remote add upstream https://github.com/pgRouting/vrprouting
~~~~
   - check the remote connection
~~~~{.c}
    git remote -v
~~~~
   - Now you should have something like this:
~~~~{.c}
origin  https://github.com/acountName/vrprouting (fetch)
origin  https://github.com/acountName/vrprouting (push)
upstream  https://github.com/pgRouting/vrprouting (fetch)
upstream  https://github.com/pgRouting/vrprouting (push)
~~~~

@section Our working model

- If you want to work on a particular issue
  - Let us know creating on the [issue](https://github.com/pgRouting/vrprouting/issues)
  - Create one if the issues does not exist


1. Allways start work from the late code of `upstream`
- Create your working branch
~~~~{.c}
   git fetch upstream
   git checkout upstream/<branch>
   git switch -c fix-for-issue-1234
~~~~
- Fetch changes on `upstream`
~~~~{.c}
   git fetch upstream
   git rebase upstream/<branch>
~~~~

4. Try new ideas in local branches, commit and merge back when you feel its worth to keep:
  - branch to a local branch
~~~~{.c}
    git switch -c issue-1234-try-add-foo
~~~~
  - Work, work, work
  - Always make sure you are in the branch you want to commit your work
~~~~{.c}
    git status
~~~~
  - Any add or delete operations make 1 file per commit
~~~~{.c}
    git add <file>; git commit -m '[<dir>] adding <file>'
    git remove <file>; git commit -m '[<dir>] adding <file>'
~~~~

@section perform_tests Beware of Side Effects

Modifications that you make should not affect other parts of the library.
vrpRouting has a testing tool, for developers.

Make sure that
  - Code changes don't generate unexpected results
  - Bug fixes actually fix the bug
    - make a pgtap test where the the query fails because of the bug
    - fix the bug
    - the test must pass
  - Expected output is generated


@section automate_process Make a run.sh

A shell to automate the compilation, installation and testing is useful when developing.

1. Move to the root directory.

2. Create your tool:
~~~~{.c}
   cp tools/developer/run.sh .
~~~~

3. Adjust to what you need
- comment out what you dont need

@warning Don't add run.sh to the repository, its for your development only.


@section file_convetions File conventions

Some conventions for directories and files
~~~~{.c}
/src/myfunction/src/dir/myfunction.c ---> for interaction with C code
/src/myfunction/src/dir/myfunction_driver.cpp ---> for interaction with CPP code
/src/myfunction/include/ -> for header files
/src/myfunction/pgtap/dir/myfunction/<files>.sql ---> pgtap test's sql
/src/myfunction/doc/dir/myfunction.rst ---> for myfunction documentation
/src/myfunction/sql/dir/myfunction.sql ---> stored function code
/src/myfunction/docqueries/dir/doc-myfunction.test.sql ---> all possible myfunction usage used in the documentation
/src/myfunction/docqueries/dir/test.conf ---> perl file to test the function
~~~~


*/
