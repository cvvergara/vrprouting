name: Build for macOS

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/macos.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
    vroom: 1.12.0

# TODO: Fix the macOS build for compiling and building VROOM with vrprouting.
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
        fail-fast: false
        matrix:
          release: [Debug, Release]
          os: [macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          brew install asio glpk rapidjson

      - name: Cache pgtap
        id: cache-pgtap
        uses: actions/cache@v4
        with:
          path: ./pgTapExtension/
          key: ${{ matrix.os }}-pgtap-${{ hashFiles('**/packages*.txt') }}

      - name: Checkout pgtap
        if: steps.cache-pgtap.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: theory/pgtap
          path: ./pgTapExtension/

      - name: Install pgTAP
        if: steps.cache-pgtap.outputs.cache-hit != 'true'
        run: |
          cd ./pgTapExtension/
          make -j 4
          sudo make install
          cpan TAP::Parser::SourceHandler::pgTAP

      - name: Configure
        run: |
          mkdir build
          cd build
          CXX=clang++ CC=clang cmake -DCMAKE_BUILD_TYPE=${{ matrix.release }} ..

      - name: Build
        run: |
          cd build
          make -j 4
          sudo make
          sudo make install

      - name: Unpack data
        if: false
        run: |
          cd tools/testers
          tar -xf matrix_new_values.tar.gz

      - name: Create superuser
        if: false
        run: |
          export PATH=/usr/local/Cellar/perl/$(perl -e 'print substr($^V, 1)')/bin:$PATH
          pg_ctl -D /usr/local/var/postgres start
          export PG_RUNNER_USER=`whoami`
          sudo -u postgres psql -p ${PGPORT} -c "DROP DATABASE IF EXISTS \"${PG_RUNNER_USER}\";"
          sudo -u postgres psql -p ${PGPORT} -c "DROP ROLE IF EXISTS \"${PG_RUNNER_USER}\";"
          sudo -u postgres psql -p ${PGPORT} -c "CREATE ROLE \"${PG_RUNNER_USER}\" WITH LOGIN SUPERUSER;"
          sudo -u postgres psql -p ${PGPORT} -c "CREATE DATABASE \"${PG_RUNNER_USER}\";"
          echo "PG_RUNNER_USER=${PG_RUNNER_USER}" >> $GITHUB_ENV

      - name: Test documentation queries are up to date
        if: false
        run: |
          export PATH=/usr/local/Cellar/perl/$(perl -e 'print substr($^V, 1)')/bin:$PATH
          pg_ctl -D /usr/local/var/postgres start
          createuser -s postgres
          createdb ___vrp___test___
          cd tools/testers
          psql -p 5432 -U postgres -d ___vrp___test___ -X -q -v ON_ERROR_STOP=1 --pset pager=off -f setup_db.sql
          psql -p 5432 -U postgres -d ___vrp___test___ -c "SELECT * FROM pgr_full_version();"
          pg_prove --failures --quiet --recurse --ext .sql -p 5432 -d ___vrp___test___ -U postgres ../../pgtap/
